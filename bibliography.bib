%https://ieeexplore.ieee.org/document/9106347
@ARTICLE{9106347,
  author={Muller, Jean-Michel},
  journal={Proceedings of the IEEE}, 
  title={Elementary Functions and Approximate Computing}, 
  year={2020},
  volume={108},
  number={12},
  pages={2136-2149},
  abstract={In this article, we review some of the classical methods used for quickly obtaining low-precision approximations to the elementary functions. Then, for each of the three main classes of elementary function algorithms (shift-and-add algorithms, polynomial or rational approximations, and table-based methods) and for the additional, specific to approximate computing, “bit-manipulation” techniques, we examine what can be done for obtaining very fast estimates of a function, at the cost of a (controlled) loss in terms of accuracy.},
  keywords={Approximation algorithms;Approximate computing;Hardware;Software algorithms;Fixed-point arithmetic;Approximate computing;elementary functions;fixed-point arithmetic;floating-point arithmetic;polynomial approximations;shift-and-add algorithms;table-based methods},
  doi={10.1109/JPROC.2020.2991885},
  ISSN={1558-2256},
  month={Dec},
}
@ARTICLE{795125,
  author={Schulte, M.J. and Stine, J.E.},
  journal={IEEE Transactions on Computers}, 
  title={Approximating elementary functions with symmetric bipartite tables}, 
  year={1999},
  volume={48},
  number={8},
  pages={842-847},
  abstract={This paper presents a high-speed method for function approximation that employs symmetric bipartite tables. This method performs two parallel table lookups to obtain a carry-save (borrow-save) function approximation, which is either converted to a two's complement number or is Booth encoded. Compared to previous methods for bipartite table approximations, this method uses less memory by taking advantage of symmetry and leading zeros in one of the two tables. It also has a closed-form solution for the table entries, provides tight bounds on the maximum absolute error, and can be applied to a wide range of functions. A variation of this method provides accurate initial approximations that are useful in multiplicative divide and square root algorithms.},
  keywords={Function approximation;Piecewise linear approximation;Table lookup;Signal processing algorithms;Delay;Closed-form solution;Polynomials;Scientific computing;Approximation algorithms;Encoding},
  doi={10.1109/12.795125},
  ISSN={1557-9956},
  month={Aug},
}
@INPROCEEDINGS{1467649,
  author={Oberman, S.F. and Siu, M.Y.},
  booktitle={17th IEEE Symposium on Computer Arithmetic (ARITH'05)}, 
  title={A high-performance area-efficient multifunction interpolator}, 
  year={2005},
  volume={},
  number={},
  pages={272-279},
  abstract={This paper presents the algorithms and implementation of a high-performance functional unit used for multiple interpolation applications. Graphics processing units (GPUs) frequently perform two classes of floating point interpolation within programmable shaders: per-pixel attribute interpolation and transcendental function approximation. We present a design that efficiently performs both classes of interpolation on a shared functional unit. Enhanced minimax approximations with quadratic interpolation minimize lookup-table sizes and datapath widths for fully-pipelined function approximation. Rectangular multipliers support both sign-magnitude and two's complement inputs of variable widths. Superpipelining is used throughout the design to increase operating frequency and interpolation throughput while maximizing area efficiency.},
  keywords={Interpolation;Graphics;Hardware;Function approximation;Throughput;Iterative algorithms;Frequency;Equations;Instruction sets;Minimax techniques},
  doi={10.1109/ARITH.2005.7},
  ISSN={1063-6889},
  month={June},
}
@article{20150911044421219,
author = {Chen, Kui-Ting and Fan, Ke and Han, Xiaojun and Baba, Takaaki},
year = {2015},
month = {01},
pages = {},
title = {A CORDIC Algorithm with Improved Rotation Strategy for Embedded Applications},
volume = {3},
journal = {Journal of Industrial and Intelligent Information},
doi = {10.12720/jiii.3.4.274-279}
}
@INPROCEEDINGS{7535235,
  author={Gilliland, Spenser and Saniie, Jafar and Vallina, Fernando Martinez},
  booktitle={2016 IEEE International Conference on Electro Information Technology (EIT)}, 
  title={Implementation of elementary functions for FPGA compute accelerators}, 
  year={2016},
  volume={},
  number={},
  pages={0179-0182},
  abstract={Field programmable gate arrays (FPGA) are growing from the role of glue logic into the area of application acceleration and compute. This is fostered by advances in silicon technologies as well as standards based methodologies for interacting with heterogeneous compute resources. As these standards generally require the implementation of elementary functions, this work outlines the implementation and evaluation of the elementary functions required by the heterogeneous programming standard OpenCL. It outlines the implementation of the math “builtin” functions using CORDIC methods and details the processes that will be taken to benchmark the resource usage, maximum frequency, and latency of each function on Xilinx 7 Series FPGAs. Because of the applicability and standardization of the OpenCL math functions, this benchmarking effort provides a basis for understanding and analysing future implementations.},
  keywords={Field programmable gate arrays;Standards;Kernel;Transistors;Benchmark testing;Program processors;Acceleration},
  doi={10.1109/EIT.2016.7535235},
  ISSN={2154-0373},
  month={May}
}
@INPROCEEDINGS{8053393,
  author={Gilliland, Spenser and Saniie, Jafar and Vallina, Fernando Martinez},
  booktitle={2017 IEEE International Conference on Electro Information Technology (EIT)}, 
  title={Analysis of library functions for FPGA compute accelerators}, 
  year={2017},
  volume={},
  number={},
  pages={394-397},
  abstract={As FPGAs have grown ever larger, there has been a shift in the manner in which they are programmed. Early on, it was typical for designers to design all FPGA firmware in house using VHDL and Verilog. This gradually shifted towards design reuse at the IP Core Level. However in modern times, even designs at the IP level are having trouble adapting quickly enough to customer demands. This has resulted in a change in focus towards higher level languages such as OpenCL. A key aspect of OpenCL is it's standard library and specifically the math builtins of the standard library. This paper performs an in-depth analysis of the math functions in the OpenCL standard library and develops a framework to perform further analysis of library functions being implemented on FPGAs.},
  keywords={Libraries;Field programmable gate arrays;Performance analysis;Standards;Tools;Databases;Digital signal processing},
  doi={10.1109/EIT.2017.8053393},
  ISSN={2154-0373},
  month={May},
}

@ARTICLE{192222,
  author={Mazenc, C. and Merrheim, X. and Muller, J.-M.},
  journal={IEEE Transactions on Computers}, 
  title={Computing functions cos/sup -1/ and sin/sup -1/ using CORDIC}, 
  year={1993},
  volume={42},
  number={1},
  pages={118-122},
  abstract={An extension of the CORDIC (coordinate rotation digital computer) algorithm that makes it possible to compute the functions cos/sup -1/, sin/sup -1/, square root 1-t/sup 2/, sinh/sup -1/ cosh/sup -1/, and square root 1+t/sup 2/ is presented. The algorithms are suitable for VLSI implementation and require only a slight modification of the original CORDIC algorithm.<>},
  keywords={Silicon compounds;Signal processing algorithms;Very large scale integration;Systolic arrays;Array signal processing;Instruments;Logic arrays;Arithmetic;Concurrent computing;Throughput},
  doi={10.1109/12.192222},
  ISSN={1557-9956},
  month={Jan},}

@ARTICLE{5976968,
  author={},
  journal={IEEE Std 754-2008 (Revision of IEEE Std 754-1985) - Redline},
  title={IEEE Standard for Floating-Point Arithmetic - Redline},
  year={2008},
  volume={},
  number={},
  pages={1-82},
  abstract={This standard specifies formats and methods for floating-point arithmetic in computer systems: standard and extended functions with single, double, extended, and extendable precision, and recommends formats for data interchange. Exception conditions are defined and standard handling of these conditions is specified.},
  keywords={IEEE standards;Arithmetic;Floating-point arithmetic;754-2008;arithmetic;binary;computer;decimal;exponent;floating-point;format;interchange;NaN;number;rounding;significand;subnormal},
  doi={10.1109/IEEESTD.2008.5976968},
  ISSN={},
  month={Aug},
}


%https://ftp.gnu.org/gnu/glibc/glibc-2.40.tar.xz
@online{libc,
	title = {libc},
	url = {https://www.gnu.org/software/libc/},
	urldate = {2024-07-03},
}
@online{cmake,
	title = {CMake},
	url = {https://cmake.org/},
	urldate = {2024-07-03},
}
@online{libjson,
	title = {json},
	url = {https://github.com/nlohmann/json},
	urldate = {2024-07-03},
}
@online{liblog,
	title = {spdlog},
	url = {https://github.com/gabime/spdlog},
	urldate = {2024-07-03},
}
@online{libfmt,
	title = {fmtlib},
	url = {https://github.com/fmtlib/fmt},
	urldate = {2024-07-03},
}
@online{libtest,
	title = {googletest},
	url = {https://github.com/google/googletest},
	urldate = {2024-07-03},
}
